--Task 4. Subquery and its type:

--1. Write an SQL query to find out which customers have not placed any orders.

select customers.firstname, customers.lastname, customers.email
from customers
where customers.customerid not in (select customerid from orders)

--2. Write an SQL query to find the total number of products available for sale. 

select count(*) as totalproducts
from products

--3. Write an SQL query to calculate the total revenue generated by TechShop.

select sum(orderdetails.quantity * products.price) as totalrevenue
from orderdetails
join products on orderdetails.productid = products.productid

--4. Write an SQL query to calculate the average quantity ordered for products in a specific category.
--Allow users to input the category name as a parameter.

select 
categories.categoryname,
avg(orderdetails.quantity) as averagequantity
from 
products
inner join 
productcategories on products.productid = productcategories.productid
inner join 
categories on productcategories.categoryid = categories.categoryid
inner join 
orderdetails on products.productid = orderdetails.productid
where 
categories.categoryname = 'electronics' 
group by 
categories.categoryname

--5. Write an SQL query to calculate the total revenue generated by a specific customer. Allow users
--to input the customer ID as a parameter.

select 
customers.customerid,
sum(orders.totalamount) as totalrevenue
from 
customers
inner join 
orders on customers.customerid = orders.customerid
where 
customers.customerid = 4
group by 
customers.customerid

--6. Write an SQL query to find the customers who have placed the most orders. List their names
--and the number of orders they've placed.

select customers.firstname, customers.lastname, count(orders.orderid) as ordercount
from customers
join orders on customers.customerid = orders.customerid
group by customers.customerid, customers.firstname, customers.lastname
order by ordercount desc

--7. Write an SQL query to find the most popular product category, which is the one with the highest
--total quantity ordered across all orders.


select 
categories.categoryname,
count(*) as ordercount
from 
productcategories
inner join 
orderdetails on productcategories.productid = orderdetails.productid
inner join 
orders on orderdetails.orderid = orders.orderid
inner join 
categories on productcategories.categoryid = categories.categoryid
group by 
categories.categoryname
order by 
count(*) desc
offset 0 rows fetch next 1 rows only

--8. Write an SQL query to find the customer who has spent the most money (highest total revenue)
--on electronic gadgets. List their name and total spending

select top 1 customers.firstname, customers.lastname, sum(orderdetails.quantity * products.price) as totalspending
from orders
join orderdetails on orders.orderid = orderdetails.orderid
join products on orderdetails.productid = products.productid
join customers on orders.customerid = customers.customerid
group by customers.customerid, customers.firstname, customers.lastname
order by totalspending desc

--9. Write an SQL query to calculate the average order value (total revenue divided by the number of
--orders) for all customers.

select avg(totalamount) as averageordervalue
from orders

--10. Write an SQL query to find the total number of orders placed by each customer and list their
--names along with the order count.

select customers.firstname, customers.lastname, count(orders.orderid) as ordercount
from customers
left join orders on customers.customerid = orders.customerid
group by customers.customerid, customers.firstname, customers.lastname

